syntax = "proto3";
package protocol;

    
message ServerState {
    string serverID = 1;
}

enum Op {
    CREATE_STREAM                     = 0;
    SHRINK_ISR                        = 1;
    REPORT_LEADER                     = 2;
    CHANGE_LEADER                     = 3;
    EXPAND_ISR                        = 4;
    DELETE_STREAM                     = 5;
    PAUSE_STREAM                      = 6;
    RESUME_STREAM                     = 7;
    PUBLISH_ACTIVITY                  = 8;
    SET_STREAM_READONLY               = 9;
    CREATE_CONSUMER_GROUP             = 10;
    JOIN_CONSUMER_GROUP               = 11;
    LEAVE_CONSUMER_GROUP              = 12;
    REPORT_CONSUMER_GROUP_COORDINATOR = 13;
    CHANGE_CONSUMER_GROUP_COORDINATOR = 14;
    ADD_POLICY                        = 15;
    REVOKE_POLICY                     = 16;
}

message RaftLog {
    Op                               op                               = 1;
    CreateStreamOp                   createStreamOp                   = 2;
    ShrinkISROp                      shrinkISROp                      = 3;
    ChangeLeaderOp                   changeLeaderOp                   = 4;
    ExpandISROp                      expandISROp                      = 5;
    DeleteStreamOp                   deleteStreamOp                   = 6;
    PauseStreamOp                    pauseStreamOp                    = 7;
    ResumeStreamOp                   resumeStreamOp                   = 8;
    PublishActivityOp                publishActivityOp                = 9;
    SetStreamReadonlyOp              setStreamReadonlyOp              = 10;
    CreateConsumerGroupOp            createConsumerGroupOp            = 11;
    JoinConsumerGroupOp              joinConsumerGroupOp              = 12;
    LeaveConsumerGroupOp             leaveConsumerGroupOp             = 13;
    ChangeConsumerGroupCoordinatorOp changeConsumerGroupCoordinatorOp = 14;
    AddPolicyOp                      addPolicyOp                      = 15;
    RevokePolicyOp                   revokePolicyOp                   = 16;
}

message CreateStreamOp {
    Stream stream = 1;
}

message ShrinkISROp {
    string stream          = 1;
    int32  partition       = 2;
    string replicaToRemove = 3;
    string leader          = 4;
    uint64 leaderEpoch     = 5;
}

message ExpandISROp {
    string stream       = 1;
    int32  partition    = 2;
    string replicaToAdd = 3;
    string leader       = 4;
    uint64 leaderEpoch  = 5;
}

message DeleteStreamOp {
    string stream = 1;
}

message PauseStreamOp {
    string         stream     = 1;
    repeated int32 partitions = 2;
    bool           resumeAll  = 3;
}

message ResumeStreamOp {
    string         stream     = 1;
    repeated int32 partitions = 2;
}

message ReportLeaderOp {
    string stream      = 1;
    int32  partition   = 2;
    string replica     = 3;
    string leader      = 4;
    uint64 leaderEpoch = 5;
}

message ChangeLeaderOp {
    string stream    = 1;
    int32  partition = 2;
    string leader    = 3;
}

message ReportConsumerGroupCoordinatorOp {
    string groupId     = 1;
    string consumerId  = 2;
    string coordinator = 3;
    uint64 epoch       = 4;
}

message ChangeConsumerGroupCoordinatorOp {
    string groupId     = 1;
    string coordinator = 2;
}

message PublishActivityOp {
    uint64 raftIndex = 1;
}

message SetStreamReadonlyOp {
    string         stream     = 1;
    repeated int32 partitions = 2;
    bool           readonly   = 3;
}

message CreateConsumerGroupOp {
    ConsumerGroup consumerGroup = 1;
}

message JoinConsumerGroupOp {
    string          groupId     = 1;
    string          consumerId  = 2;
    repeated string streams     = 3;
}

message LeaveConsumerGroupOp {
    string groupId    = 1;
    string consumerId = 2;
    bool   expired    = 3; // If consumer was removed because they timed out.
}

// Policy represents an ACL-style policy
message Policy {
    string userId     = 1;
    string resourceId = 2;
    string action     = 3;
}

// AddPolicyOp adds an ACL-style policy
message AddPolicyOp {
    Policy policy = 1;
}

// RevokePolicyOp removes an ACL-style policy
message RevokePolicyOp {
    Policy policy = 1;
}

message NullableInt64 {
    int64 value = 1; 
}

message NullableInt32 {
    int32 value = 1; 
}

message NullableBool {
    bool value = 1; 
}

message StreamConfig  {
    NullableInt64 retentionMaxBytes             = 1;
    NullableInt64 retentionMaxMessages          = 2;
    NullableInt64 retentionMaxAge               = 3;  
    NullableInt64 cleanerInterval               = 4;
    NullableInt64 segmentMaxBytes               = 5;
    NullableInt64 segmentMaxAge                 = 6;
    NullableInt32 compactMaxGoroutines          = 7;
    NullableBool  compactEnabled                = 8;
    NullableInt64 autoPauseTime                 = 9;
    NullableBool  autoPauseDisableIfSubscribers = 10;
    NullableInt32 minIsr                        = 11;
    NullableBool  optimisticConcurrencyControl  = 12;
    NullableBool  encryption                    = 13; 
}

message Stream {
    string             name              = 1;
    string             subject           = 2;
    repeated Partition partitions        = 3;
    StreamConfig       config            = 4;
    int64              creationTimestamp = 5;
}

message Partition {
    string          subject           = 1;
    string          stream            = 2;
    int32           id                = 3;
    string          group             = 4;
    int32           replicationFactor = 5;
    repeated string replicas          = 6;
    string          leader            = 7;
    repeated string isr               = 8;
    uint64          leaderEpoch       = 9;
    uint64          epoch             = 10;
    bool            paused            = 11; // Only used for snapshotting.
    bool            readonly          = 12; // Only used for snapshotting.
}

message Consumer {
    string          id      = 1;
    repeated string streams = 2;
}

message ConsumerGroup {
    string            id          = 1;
    repeated Consumer members     = 2; 
    string            coordinator = 3;
    uint64            epoch       = 4;
}

// RaftJoinRequest is a request to join a Raft group.
message RaftJoinRequest {
    string nodeID   = 1; // ID of the joining node.
    string nodeAddr = 2; // Address of the joining node.
}

// RaftJoinResponse is a response to a RaftJoinRequest.
message RaftJoinResponse {
    string error = 1; // Error string, omitted if no error. 
}

message MetadataSnapshot {
    repeated Stream        streams = 1;
    repeated ConsumerGroup groups  = 2;
}

message ReplicationRequest {
    string replicaID   = 1;
    int64  offset      = 2;
    uint64 leaderEpoch = 3;
}

message LeaderEpochOffsetRequest {
    uint64 leaderEpoch = 1;
}

message LeaderEpochOffsetResponse {
    int64 endOffset = 1;
}

message PropagatedRequest {
    Op                               op                               = 1;
    CreateStreamOp                   createStreamOp                   = 2;
    ShrinkISROp                      shrinkISROp                      = 3;
    ReportLeaderOp                   reportLeaderOp                   = 4;
    ExpandISROp                      expandISROp                      = 5;
    DeleteStreamOp                   deleteStreamOp                   = 6;
    PauseStreamOp                    pauseStreamOp                    = 7;
    ResumeStreamOp                   resumeStreamOp                   = 8;
    SetStreamReadonlyOp              setStreamReadonlyOp              = 9;
    JoinConsumerGroupOp              joinConsumerGroupOp              = 10;
    LeaveConsumerGroupOp             leaveConsumerGroupOp             = 11;
    ReportConsumerGroupCoordinatorOp reportConsumerGroupCoordinatorOp = 12;
    AddPolicyOp                      addPolicyOp                      = 13;
    RevokePolicyOp                   revokePolicyOp                   = 14;
}

message Error {
    uint32 code = 1;
    string msg  = 2;
}

message PropagatedResponse {
    Op    op    = 1;
    Error error = 2;
    // Reserving = 3 for createStreamResp if needed.
    // Reserving = 4 for shrinkISRResp if needed.
    // Reserving = 5 for reportLeaderResp if needed.
    // Reserving = 6 for expandISRResp if needed.
    // Reserving = 7 for deleteStreamResp if needed.
    // Reserving = 8 for pauseStreamResp if needed.
    // Reserving = 9 for resumeStreamResp if needed.
    // Reserving = 10 for setStreamReadonlyResp if needed.
    message JoinConsumerGroupResponse {
        string coordinator = 1;
        uint64 epoch       = 2;
    }
    JoinConsumerGroupResponse joinConsumerGroupResp = 11;
    // Reserving = 12 for leaveConsumerGroupResp if needed.
    // Reserving = 13 for reportConsumerGroupCoordinatorResp if needed.
}

message ServerInfoRequest {
    string id = 1;
}

message ServerInfoResponse {
    string id   = 1;
    string host = 2;
    int32  port = 3;
}

message PartitionStatusRequest {
    string stream    = 1;
    int32  partition = 2;
}

message PartitionStatusResponse {
    bool exists   = 1;
    bool isLeader = 2;
}

message PartitionNotification {
    string stream    = 1;
    int32  partition = 2;
}

message Cursor {
    string stream    = 1;
    int32  partition = 2;
    string cursorId  = 3;
    int64  offset    = 4;
}
